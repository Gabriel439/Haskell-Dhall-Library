name: main
on: [push]
#on:
#  push:
#    tags:
#      - '[0-9]+.[0-9]+.[0-9]+'
#      - '[0-9]+.[0-9]+.[0-9]+[0-9]+'
jobs:
  build:
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-latest]
        #os: [macOS-latest, ubuntu-latest, windows-latest]
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      BENCHMARKS: >
        dhall
      #  dhall-docs
      # dhall-lsp-server
      TESTS: >
        dhall-bash
        dhall-json
        dhall-openapi
        dhall-yaml
      TESTS_UTF8: >
        dhall
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v2
        with:
          submodules: true
      - id: setup-haskell-cabal
        name: "Setup Haskell environment"
        uses: haskell/actions/setup@v1.2.1
        with:
          enable-stack: true
      - name: "Cache"
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ hashFiles('stack.yaml') }}
          restore-keys: |
            ${{ runner.os }}-
          path: |
            ${{ steps.setup-haskell-cabal.outputs.stack-root }}
      - name: "Build"
        run: stack build --copy-bins --local-bin-path ./bin --test --bench --no-run-tests --no-run-benchmarks
      - if: ${{ matrix.os == 'windows-latest' }}
        name: "Run tests (Windows)"
        run: |
          codepage="$(chcp)"
          chcp 65001 && stack test ${TESTS_UTF8:0:-1}
          chcp "${codepage}" && stack test ${TESTS:0:-1}
      - if: ${{ matrix.os != 'windows-latest' }}
        name: "Run tests (Not Windows)"
        run: stack test ${TESTS:0:-1} ${TESTS_UTF8:0:-1}
        #run: stack test ${{ format('{0} {1}', env.tests, env.tests_utf8) }}
      - name: "Run benchmarks"
        run: stack bench ${BENCHMARKS:0:-1} --benchmark-arguments "--quick --min-duration=0 --include-first-iter"
      - name: "Upload executables"
        uses: actions/upload-artifact@v2
        with:
          name: executables-${{ matrix.os }}
          path: 'bin/*'

  package:
    strategy:
      matrix:
        include:
          - cabal-name: dhall
            assets: >
              bin/dhall
              share/man/man1/dhall.1
          - cabal-name: dhall-bash
            assets: >
              bin/dhall-to-bash
          - cabal-name: dhall-docs
            assets: >
              bin/dhall-docs
              share/man/man1/dhall-docs.1
          - cabal-name: dhall-json
            assets: >
              bin/dhall-to-json
              bin/dhall-to-yaml
              bin/json-to-dhall
          - cabal-name: dhall-lsp-server
            assets: >
              bin/dhall-lsp-server
          - cabal-name: dhall-nix
            assets: >
              bin/dhall-to-nix
          - cabal-name: dhall-openapi
            assets: >
              bin/openapi-to-dhall
          - cabal-name: dhall-yaml
            assets: >
              bin/dhall-to-yaml-ng
              bin/yaml-to-dhall
    name: Package ${{ matrix.cabal-name }} for macos
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: "Downloading executables for macOS-latest"
        uses: actions/download-artifact@v2
        with:
          name: executables-macOS-latest
          path: bin
      - name: "Prepare packaging"
        run: |
          mkdir -p share/man/man1
          cp dhall/man/dhall.1 share/man/man1/
          cp dhall-docs/src/Dhall/data/man/dhall-docs.1 share/man/man1/
      - id: package
        name: "Package ${{ matrix.cabal-name }}"
        uses: ./.github/actions/package
        with:
          cabal-name: ${{ matrix.cabal-name }}
          os: macos
          assets: ${{ matrix.assets }}
      - name: "Upload ${{ matrix.cabal-name }}"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.package.outputs.package-file }}
          path: ${{ steps.package.outputs.package-file }}
