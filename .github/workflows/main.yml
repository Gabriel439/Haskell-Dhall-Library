name: main
on: [push]
#on:
#  push:
#    tags:
#      - '[0-9]+.[0-9]+.[0-9]+'
#      - '[0-9]+.[0-9]+.[0-9]+[0-9]+'
jobs:
  build:
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-latest, windows-latest]
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v2
        with:
          submodules: true
      - id: setup-haskell-cabal
        name: "Setup Haskell environment"
        uses: haskell/actions/setup@v1.2.1
        with:
          enable-stack: true
      - name: "Restore/Update cache"
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.setup-haskell-cabal.outputs.stack-root }}
            .stack-work
          key: ${{ runner.os }}-${{ hashFiles('stack.yaml.lock') }}
          restore-keys: |
            ${{ runner.os }}-
      - name: "Build"
        run: stack build --copy-bins --local-bin-path ./bin --test --bench --no-run-tests --no-run-benchmarks
      - name: "Upload executables"
        uses: actions/upload-artifact@v2
        with:
          name: executables-${{ matrix.os }}
          path: 'bin/*'
  test:
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-latest, windows-latest]
        cabal-name:
          - dhall
          - dhall-bash
          #- dhall-docs
          - dhall-json
          - dhall-lsp-server
          - dhall-openapi
          - dhall-yaml
    name: Test ${{ matrix.cabal-name }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [build]
    steps:
      # chcp 65001 (utf-8) needed to make doctest work
      #- if: ${{ matrix.os == 'windows-latest' }}
      #  run: chcp 65001 && stack test
      #- if: ${{ matrix.os != 'windows-latest' }}
      #  run: stack test
      - if: ${{ matrix.os == 'windows-latest' }}
        run: chcp 65001 && stack test ${{ matrix.cabal-name }}
      - if: ${{ matrix.os != 'windows-latest' }}
        run: stack test ${{ matrix.cabal-name }}
      #- run: stack test dhall-bash
      #- run: stack test dhall-json
      #- run: stack test dhall-lsp-server
      #- run: stack test dhall-openapi
      #- run: stack test dhall-yaml
      ## Enable when issue with path-separators tests on windows is resolved
      ## - stack test dhall-docs
      - if: ${{ matrix.cabal-name == 'dhall' }}
        run: stack bench dhall --benchmark-arguments "--quick --min-duration=0 --include-first-iter"

  package:
    strategy:
      matrix:
        include:
          - cabal-name: dhall
            assets: >
              bin/dhall
              share/man/man1/dhall.1
          - cabal-name: dhall-bash
            assets: >
              bin/dhall-to-bash
          - cabal-name: dhall-docs
            assets: >
              bin/dhall-docs
              share/man/man1/dhall-docs.1
          - cabal-name: dhall-json
            assets: >
              bin/dhall-to-json
              bin/dhall-to-yaml
              bin/json-to-dhall
          - cabal-name: dhall-lsp-server
            assets: >
              bin/dhall-lsp-server
          - cabal-name: dhall-nix
            assets: >
              bin/dhall-to-nix
          - cabal-name: dhall-openapi
            assets: >
              bin/openapi-to-dhall
          - cabal-name: dhall-yaml
            assets: >
              bin/dhall-to-yaml-ng
              bin/yaml-to-dhall
    name: Package ${{ matrix.cabal-name }} for macos
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: "Downloading executables for macOS-latest"
        uses: actions/download-artifact@v2
        with:
          name: executables-macOS-latest
          path: bin
      - name: "Prepare packaging"
        run: |
          mkdir -p share/man/man1
          cp dhall/man/dhall.1 share/man/man1/
          cp dhall-docs/src/Dhall/data/man/dhall-docs.1 share/man/man1/
      - id: package
        name: "Package ${{ matrix.cabal-name }}"
        uses: ./.github/actions/package
        with:
          cabal-name: ${{ matrix.cabal-name }}
          os: macos
          assets: ${{ matrix.assets }}
      - name: "Upload ${{ matrix.cabal-name }}"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.package.outputs.package-file }}
          path: ${{ steps.package.outputs.package-file }}
