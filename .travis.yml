sudo: required

language: generic

cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack
  - $TRAVIS_BUILD_DIR/.stack-work

matrix:
  include:
  # Build only on macOS
  - env: BUILD=stack
    compiler: ": #stack default osx"
    os: osx

# Build only master and release tags
branches:
  only:
  - master
  - /^\d+\.\d+\.\d+(\.\d+)?$/


before_install:
  # Using compiler above sets CC to an invalid value, so unset it
  - unset CC
  # We want to always allow newer versions of packages when building on GHC HEAD
  - CABALARGS=""
  - if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi
  # Download and unpack the stack executable
  - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:/opt/alex/$ALEXVER/bin:/opt/happy/$HAPPYVER/bin:$HOME/.cabal/bin:$PATH
  - mkdir -p ~/.local/bin
  - travis_retry curl --insecure -L https://get.haskellstack.org/stable/osx-x86_64.tar.gz | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
  # Use the more reliable S3 mirror of Hackage
  - mkdir -p $HOME/.cabal
  - echo 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME/.cabal/config
  - echo 'remote-repo-cache: $HOME/.cabal/packages' >> $HOME/.cabal/config


install:
  - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - if [ -f configure.ac ]; then autoreconf -i; fi
  - set -ex
  - stack --no-terminal --install-ghc $ARGS test --bench --only-dependencies
  - set +ex


script:
  - export PATH="${PATH}:$(pwd)/artifacts"
  - stack build --copy-bins --local-bin-path ./bin
  - get_cabal_version() { cat $1/$1.cabal | grep '^Version: ' | gsed -e 's/^Version: //g'; }
  - mk_release_name() { echo "$1-$(get_cabal_version $1)-x86_64-macos.tar.bz2"; }
  - tar -jcvf $(mk_release_name dhall) bin/dhall
  - tar -jcvf $(mk_release_name dhall-json) bin/dhall-to-json bin/dhall-to-yaml bin/json-to-dhall bin/yaml-to-dhall
  - tar -jcvf $(mk_release_name dhall-bash) bin/dhall-to-bash
  - tar -jcvf $(mk_release_name dhall-lsp-server) bin/dhall-lsp-server

before_deploy:
  - stack build --copy-bins --local-bin-path ./bin
  # TODO: move the tar operations here
  - mkdir -p uploads
  - mv *.tar.bz2 uploads/

deploy:
  - provider: releases
    api_key: $API_KEY
    file_glob: true
    file: uploads/*
    skip_cleanup: true
    on:
      tags: true
    script:
      - echo 'done'
